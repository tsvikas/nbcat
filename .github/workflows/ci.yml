name: CI

on:
  workflow_dispatch:
  pull_request:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  black:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: psf/black@stable
        with:
          jupyter: false
          version: "~=25.0"

  ruff-check:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v3

  pre-commit:
    if: ${{ always() }}
    env:
      COLUMNS: 120
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pre-commit/action@v3.0.1

  mypy:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - name: Install packages
        run: >-
          uv sync
          --all-extras
          --no-default-groups
          --group typing
          --group test
          --exact
          --locked
      - name: List packages
        run: uv pip list
      - name: Run mypy
        run: uv run --no-sync mypy

  test:
    if: ${{ always() }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # test with highest resolution
          - resolution: "highest"
            os: ubuntu-latest
            python-version: "3.13"
          # test with pypy
          - resolution: "highest"
            os: ubuntu-latest
            python-version: "pypy3.10"
          - resolution: "highest"
            os: ubuntu-latest
            python-version: "pypy3.11"
          # test with lowest resolution
          - resolution: "lowest"
            os: ubuntu-latest
            python-version: "3.9"
          # test with different os
          - resolution: "locked"
            os: ubuntu-latest
            python-version: "3.9"
          - resolution: "locked"
            os: macos-latest
            python-version: "3.9"
          - resolution: "locked"
            os: windows-latest
            python-version: "3.9"
          # test on prerelease
          - resolution: "prerelease"
            os: ubuntu-latest
            python-version: "3.13"
          - resolution: "prerelease"
            os: ubuntu-latest
            python-version: "3.14"
    name: test-${{ matrix.python-version }}-${{ matrix.resolution }}-${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache-suffix: ${{ matrix.resolution }}
      - name: Set versions that allow failure
        # pypy and prerelease python versions might fail to install dependencies. In this case, we do not fail the job
        run: >-
          echo "ALLOW_FAILURE=${{ matrix.resolution == 'prerelease' || startsWith(matrix.python-version, 'pypy') }}"
          >> "$GITHUB_ENV"
      - name: Install packages
        id: install_packages
        run: >-
          uv sync
          --all-extras
          --no-default-groups
          --group test
          --exact
          ${{ matrix.resolution == 'locked' && '--locked' ||
              matrix.resolution == 'lowest' && '--upgrade --resolution lowest-direct' ||
              matrix.resolution == 'highest' && '--upgrade --resolution highest' ||
              matrix.resolution == 'prerelease' && '--upgrade --resolution highest --prerelease allow' ||
              '--NON_RECOGNIZED_RESOLUTION'
          }}
        continue-on-error: ${{ env.ALLOW_FAILURE == 'true' }}
      - name: Stop job with warning if install fails for specific versions
        if: ${{ env.ALLOW_FAILURE == 'true' && steps.install_packages.outcome == 'failure' }}
        run: >-
          echo "::warning::Stopping job due to installation failure on Python ${{ matrix.python-version }}"
      - name: List packages
        if: ${{ steps.install_packages.outcome == 'success' }}
        run: uv pip list
      - name: Run tests
        if: ${{ steps.install_packages.outcome == 'success' }}
        run: uv run --no-sync pytest

  pylint:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - name: Install packages
        run: >-
          uv sync
          --all-extras
          --no-default-groups
          --exact
          --locked
      - name: List packages
        run: uv pip list
      # use pylint exitcode to fail only on errors.
      - name: Run Pylint
        run: |
          set +e
          uv run --no-sync --with pylint pylint src
          result=$?
          set -e
          [ $((result & 1)) -ne 0 ] && echo "::error ::Pylest fatal(s) found"
          [ $((result & 2)) -ne 0 ] && echo "::error ::Pylest error(s) found"
          [ $((result & 4)) -ne 0 ] && echo "::warning ::Pylest warning(s) found"
          [ $((result & 8)) -ne 0 ] && echo "::warning ::Pylest refactor(s) found"
          [ $((result & 16)) -ne 0 ] && echo "::warning ::Pylest convention(s) found"
          [ $((result & 32)) -ne 0 ] && echo "::error ::Pylest usage error"
          exit $((result & 35))
