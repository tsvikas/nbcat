[tool.poetry]
name = "nbcat"
version = "0.0.0"  # managed with poetry-dynamic-versioning
description = ""
authors = ["Tsvika S <tsvikas@gmail.com>"]
# optional settings:
license = "AGPL-3.0-or-later"
readme = "README.md"
repository = "https://github.com/tsvikas/nbcat"

[tool.poetry.scripts]
nbcat = "nbcat.__main__:app"

[tool.poetry.dependencies]
python = "~3.12"
pygments = "^2.17.2"
typer = "^0.12.2"
nbconvert = "^7.16.3"

[tool.poetry.group.dev.dependencies]
black = "^24"
dunamai = "^1"
ruff = "^0.2"
pre-commit = "^3"

[tool.poetry.group.typing.dependencies]
mypy = "^1"
types-Pygments = "^2.17"

[tool.poetry.group.testing.dependencies]
pytest = "^8"
pytest-clarity = "^1"
pytest-cov = "^4"
pytest-pretty = "^1"
pytest-reverse = "^1"


[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"


[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.pytest.ini_options]
addopts = "--doctest-modules --cov=nbcat"


[tool.mypy]
mypy_path = "stubs"
packages = "nbcat"
strict = true


[tool.black]
target-version = ["py312"]
preview = false


[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # needed only in large codebases
  "TD002",    # flake8-todos/missing-todo-author
  "TD003",    # flake8-todos/missing-todo-link
  # incompatible with other rules
  "D203",     # pydocstyle/one-blank-line-before-class, incompatible D211
  "D212",     # pydocstyle/multi-line-summary-first-line, incompatible D213
  "D400",     # pydocstyle/ends-in-period, incompatible D415
  "COM812",   # flake8-commas/missing-trailing-comma, incompatible with black
  # wrong:
  "PD010",    # pandas-vet/pandas-use-of-dot-pivot-or-unstack
  "PD013",    # pandas-vet/pandas-use-of-dot-stack
  "EM",       # flake8-errmsg
  # annoying:
  "RET504",   # flake8-return/unnecessary-assign
  "ANN1",     # flake8-annotations/missing-type-self,missing-type-cls
  # ban something useful for a good reason
  #"C901",     # mccabe/complex-structure
  #"S101",     # flake8-bandit/assert
  #"FBT001",   # flake8-boolean-trap/boolean-type-hint-positional-argument
  #"FBT002",   # flake8-boolean-trap/boolean-default-value-positional-argument
  #"DTZ",      # flake8-datetimez
  #"PD901",    # pandas-vet/pandas-df-variable-name
  #"FIX",      # flake8-fixme
  #"ERA001",   # eradicate/commented-out-code
  #"PLR091",   # PyLint-Refactor/too-many-*
  #"TRY003",   # tryceratops/raise-vanilla-args
]
ignore-init-module-imports = true  # Avoid automatically removing unused imports in __init__.py

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true  # allow you to omit the return type annotation for __init__ methods

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.per-file-ignores]
"nbcat/" = [
  "PT",       # flake8-pytest-style
]
"tests/*.py" = [
  "INP001",   # flake8-no-pep420/implicit-namespace-package
  "PLR2004",  # PyLint-Refactor/magic-value-comparison
  "S101",     # flake8-bandit/assert
  "D1",       # pydocstyle/undocumented-*
]


[tool.poe.tasks]
check        = ["format", "lint", "test"]
test         = "pytest"
lint-mypy    = "mypy"
version      = "dunamai from git"

[tool.poe.tasks.format]
sequence = ["format-isort $target", "format-black $target"]
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-isort]
cmd = "ruff check --select I001 --fix $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-black]
cmd = "black $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.lint]
sequence = ["lint-ruff $target", "lint-mypy"]
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.lint-ruff]
cmd = "ruff check $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks._tag]
cmd = "git tag -a $tagname -m \"version $tagname\" -e"
args = [{name="tagname", positional=true, required=true}]

[tool.poe.tasks.tag]
sequence = ["check", "_tag $tagname"]
args = [{name="tagname", positional=true, required=true}]
