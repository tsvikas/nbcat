[project]
name = "nbcat"
version = "0.2.0+dev"
description = "display jupyter notebooks in the terminal"
authors = [{name="Tsvika S", email= "tsvikas@gmail.com"}]
license.text = "MIT"
readme = "README.md"
urls.repository = "https://github.com/tsvikas/nbcat"
requires-python = ">= 3.9"

dependencies= [
  "pygments >= 2.17",
  "typer >= 0.15",
  "nbconvert >= 7.16",
]

[project.scripts]
nbcat = "nbcat.cli:app"

[dependency-groups]
dev = [
  # dev
  "black[jupyter] >= 24",
  "ruff >= 0.8",
  "pre-commit >= 4",
  # typing
  "mypy >= 1",
  "types-Pygments >= 2.17",
  # tests
  "pytest >= 8",
  "pytest-clarity >= 1",
  "pytest-cov >= 6",
  "pytest-pretty >= 1",
  "pytest-reverse >= 1",
  "pytest-datadir >= 1.5.0",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.pytest.ini_options]
addopts = ["--doctest-modules", "--cov=src/nbcat"]


[tool.mypy]
files = ["src", "tests"]
mypy_path = "stubs"
strict = true


[tool.black]
target-version = ["py39"]
preview = false


[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # needed only in large codebases
  "TD002",    # flake8-todos/missing-todo-author
  "TD003",    # flake8-todos/missing-todo-link
  # incompatible with other rules
  "D203",     # pydocstyle/one-blank-line-before-class, incompatible D211
  "D212",     # pydocstyle/multi-line-summary-first-line, incompatible D213
  "D400",     # pydocstyle/ends-in-period, incompatible D415
  "COM812",   # flake8-commas/missing-trailing-comma, incompatible with black
  # wrong:
  "PD010",    # pandas-vet/pandas-use-of-dot-pivot-or-unstack
  "PD013",    # pandas-vet/pandas-use-of-dot-stack
  "EM",       # flake8-errmsg
  # annoying:
  "RET504",   # flake8-return/unnecessary-assign
  "ANN1",     # flake8-annotations/missing-type-self,missing-type-cls
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true  # allow you to omit the return type annotation for __init__ methods

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.per-file-ignores]
"src/nbcat/" = [
  "PT",       # flake8-pytest-style
]
"tests/*.py" = [
  "INP001",   # flake8-no-pep420/implicit-namespace-package
  "PLR2004",  # PyLint-Refactor/magic-value-comparison
  "S101",     # flake8-bandit/assert
  "D1",       # pydocstyle/undocumented-*
]
"tests/**.ipynb" = ["D", "ANN", "T201", "PLR2004"]


[tool.poe.tasks]
check        = ["format", "lint", "test"]
test         = "pytest"
lint-mypy    = "mypy"

[tool.poe.tasks.format]
sequence = ["format-isort $target", "format-black $target"]
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-isort]
cmd = "ruff check --select I001 --fix $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.format-black]
cmd = "black $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.lint]
sequence = ["lint-ruff $target", "lint-mypy"]
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks.lint-ruff]
cmd = "ruff check $target"
args = [{name="target", positional=true, default=".", multiple=true}]

[tool.poe.tasks._tag]
cmd = "git tag -a $tagname -m \"version $tagname\" -e"
args = [{name="tagname", positional=true, required=true}]

[tool.poe.tasks.tag]
sequence = ["check", "_tag $tagname"]
args = [{name="tagname", positional=true, required=true}]
